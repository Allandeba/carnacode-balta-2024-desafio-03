@page "/imc"
@using Imc.Services;
@using Imc.Pages.ImcCalculator.Components

<PageTitle>Cálculo de IMC</PageTitle>

<ImcCalculatorForm Model="Imc" CalculateCallback="@CalculteImc">
    <button type="button" class="btn btn-secondary" @onclick="ToCalcExpanationPage">Entenda o cálculo</button>
</ImcCalculatorForm>

<ModalDialog ConfirmationActionCallback="SaveHistoryAsync" @ref="_modalDialog">
    <button type="button" class="btn btn-secondary" @onclick="ToHistoryPageAsync">Ver meu histórico</button>
</ModalDialog>

@code {
    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;
    private Imc.Models.ImcCalculator Imc { get; set; } = new();
    private ModalDialog _modalDialog = null!;

    private async Task ToCalcExpanationPage()
    {
        await JsRuntime.InvokeAsync<object>("open", "https://www.unimedcampinas.com.br/blog/cuidado-continuo/entenda-o-que-e-calculo-imc-e-para-que-serve", "_blank");
    }

    private async Task ToHistoryPageAsync()
    {
        await _modalDialog.HideModalAsync();
        NavigationManager.NavigateTo("history");
    }

    private async Task CalculteImc()
    {
        var imcCalculatorService = new ImcCalculatorService();
        var result = imcCalculatorService.Calculate(Imc);
        _modalDialog.Title = result.DisplayTitle;
        _modalDialog.Body = result.Body;
        await _modalDialog.ShowModalAsync();
    }

    private async Task SaveHistoryAsync()
    {
        var imcList = await LocalStorage.GetItemAsync<List<Imc.Models.ImcCalculator>>(StorageConstants.Key) ?? new List<Imc.Models.ImcCalculator>();
        imcList.Add(Imc);
        await LocalStorage.SetItemAsync(StorageConstants.Key, imcList);
        await ToHistoryPageAsync();
    }
}
