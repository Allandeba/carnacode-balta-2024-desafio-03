@inject IJSRuntime JsRuntime;

<div class="modal" id="modalDialog" style="display:block; background-color: #2E1462;" aria-modal="true" role="dialog">
    <div class="modal-dialog">

        <div class="text-center" style="top: 4rem; position: relative; z-index: 999;">
            <img class="img-thumbnail" src="icon-no-bg.png" alt="Logo" style="height: 95px; width: 95px; border: 3px solid #45FEFE; border-radius: 15px;">
        </div>

        <div class="modal-content" style="border-radius: 35px; margin-top: 30px">
            <div class="d-flex m-3">
                <div class="col text-center">
                    <h4 style="margin-top: 2rem">@Title</h4>
                    <p>@Body</p>

                    <div class="col mb-3">
                        <button type="button" @onclick="ConfirmButtonAsync" class="btn btn-primary">@ConfirmationButtonCaption</button>
                    </div>

                    <div class="col">
                        @ChildContent
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback ConfirmationActionCallback { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await HideModalAsync();
        return base.OnAfterRenderAsync(firstRender);
    }

    public string Title { get; set; } = string.Empty;
    public string Body { get; set; } = string.Empty;
    public string ConfirmationButtonCaption { get; set; } = string.Empty;

    public async Task ShowModalAsync() => await JsRuntime.InvokeVoidAsync("showModal", "modalDialog");
    public async Task HideModalAsync() => await JsRuntime.InvokeVoidAsync("hideModal", "modalDialog");

    private async Task ConfirmButtonAsync()
    {
        await HideModalAsync();
        await ConfirmationActionCallback.InvokeAsync();
    }
}